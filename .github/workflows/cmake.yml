name: CMake

on: [push]

env:
  # TeamTalkJNI JUnit environment variables
  INPUTDEVICEID: 1978
  OUTPUTDEVICEID: 1978
  OPUSTOOLS: 0
  VERBOSE: 0
#  TEAMTALK_ROOT: ${{runner.workspace}}
#  PYTHONPATH: ${TEAMTALK_ROOT}/Library/TeamTalkPy:${PYTHONPATH}
#  LD_LIBRARY_PATH: ${TEAMTALK_ROOT}/Library/TeamTalk_DLL:${TEAMTALK_ROOT}/Library/TeamTalkJNI/libs
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
  
    - name: Source environment
      working-directory: ${{runner.workspace}}/TeamTalk5
      run: source env.sh

    - name: Install Dependencies
      run: sudo apt install libace-dev libace-ssl-dev libace-inet-dev libace-inet-ssl-dev libtinyxml-dev zlib1g-dev libssl-dev libopus-dev libspeex-dev libspeexdsp-dev libvpx-dev libogg-dev portaudio19-dev libasound2-dev libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libswresample-dev libswscale-dev cmake junit4 catch python3-minimal doxygen

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DBUILD_TEAMTALK_CORE=ON -DBUILD_TEAMTALK_STATIC=OFF -DBUILD_TEAMTALK_ACE=OFF -DSPEEXDSP_STATIC=OFF -DFFMPEG_STATIC=OFF -DAVF=OFF -DMSDMO=OFF -DDSHOW=OFF -DVIDCAP=OFF -DMEDIAFOUNDATION=OFF -DOPUS_STATIC=OFF -DLIBVPX_STATIC=OFF -DSPEEX_STATIC=OFF -DOGG_STATIC=OFF -DOPUSTOOLS=OFF -DLAMEMP3=OFF -DMSVS_UNITTEST=OFF -DACE_STATIC=OFF -DTINYXML_STATIC=OFF -DPORTAUDIO=OFF -DZLIB_STATIC=OFF -DCATCH_UNITTEST=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build .

    - name: Java Server Test
      working-directory: ${{runner.workspace}}/TeamTalk5/Library/TeamTalkJNI
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: make runjunitsrv
